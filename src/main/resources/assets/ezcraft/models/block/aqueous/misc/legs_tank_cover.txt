Stream.of(
Block.makeCuboidShape(2.25, 0, 2.25, 4.25, 13, 4.25),
Block.makeCuboidShape(11.75, 0, 2.25, 13.75, 13, 4.25),
Block.makeCuboidShape(11.75, 0, 11.75, 13.75, 13, 13.75),
Block.makeCuboidShape(2.25, 0, 11.75, 4.25, 13, 13.75),
Block.makeCuboidShape(4.25, 4, 4.25, 11.75, 4.25, 11.75),
Block.makeCuboidShape(4.25, 4, 11.75, 11.75, 13, 12),
Block.makeCuboidShape(4.25, 4, 4, 11.75, 13, 4.25),
Block.makeCuboidShape(4, 4, 4.25, 4.25, 13, 11.75),
Block.makeCuboidShape(11.75, 4, 4.25, 12, 13, 11.75),
Block.makeCuboidShape(2.25, 13.5, 2.25, 2.5, 15.25, 13.5),
Block.makeCuboidShape(2.5, 13.5, 13.25, 13.5, 15.25, 13.5),
Block.makeCuboidShape(2.5, 13.5, 2.25, 13.5, 15.25, 2.5),
Block.makeCuboidShape(13.5, 13.5, 2.25, 13.75, 15.25, 13.5),
Block.makeCuboidShape(1.5, 13, 1.5, 6, 14, 14.25),
Block.makeCuboidShape(10, 13, 1.5, 14.5, 14, 14.25),
Block.makeCuboidShape(6, 13, 1.5, 10, 14, 6),
Block.makeCuboidShape(6, 13, 10, 10, 14, 14.25)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});